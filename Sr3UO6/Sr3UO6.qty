-- Script for generating XAS and RIXS with local coulomb interaction from a FPLO output file
-- Created on 01.08.2023 
start_time = os.time()

dofile("src/functions.qty")

Bz = 0.000001
U5f5f = 5
U5f3d = 6
U5f4f = 6
delta_per_orbital = 1.25

fplo_input_file ="fplo.Sr3UO6"
output_folder   ="Sr3UO6"

dofile("src/DFT_to_SplitLigandField.qty")

index, NF = CreateAtomicIndicesDict({"5f","Lof","3d","4f"})
h_dft.NF= NF

dofile("src/coulomb_interaction.qty")

one={}
for i=1,NF do
    one[#one+1]=1
end

OppLz_5f = NewOperator("Lz"   ,NF, index["5f_Up"], index["5f_Dn"])
OppSz_5f = NewOperator("Sz"   ,NF, index["5f_Up"], index["5f_Dn"])
OppN_5f = NewOperator("Number", NF, index["5f"],index["5f"],{1,1,1,1,1,1,1,1,1,1,1,1,1,1})
OppN_4f = NewOperator("Number", NF, index["4f"],index["4f"],{1,1,1,1,1,1,1,1,1,1,1,1,1,1})
OppN_3d = NewOperator("Number", NF, index["3d"],index["3d"],{1,1,1,1,1,1,1,1,1,1})
OppN_L = NewOperator("Number", NF, index["Lof"],index["Lof"],{1,1,1,1,1,1,1,1,1,1,1,1,1,1})
OppN = NewOperator("Number", NF, index["all"],index["all"],one)

h_dft = 1/2 * (h_dft + ConjugateTranspose(h_dft))

Hamiltonian     = h_dft
                + Opp5fldots 
                + OppF_U5f - MFOppF_U5f/2
                + Bz*(2*OppSz_5f + OppLz_5f)
                + delta_per_orbital * OppN

XASHamiltonian  = Hamiltonian 
                + OppUdf - 10 * U5f3d *OppN_5f
                + Opp3dldots

FinHamiltonian  = Hamiltonian
                + OppUff - 14 * U5f4f * OppN_5f
                + Opp4fldots
                

Hamiltonian = Chop(Hamiltonian,1e-8)
XASHamiltonian = Chop(XASHamiltonian,1e-8)
FinHamiltonian = Chop(FinHamiltonian,1e-8)
print("Ok")

--#################################### XAS #####################################################################


-- Calculate Groundstate:
Npsi=1
print("Calculating ",Npsi," Groundstates")
StartRestrictions = {NF, 0, {DeterminantString(NF,index["5f"]),0,0},
{DeterminantString(NF,index["Lof"]),#index["Lof"],#index["Lof"]},
{DeterminantString(NF,index["3d"]),#index["3d"],#index["3d"]},
{DeterminantString(NF,index["4f"]),#index["4f"],#index["4f"]}}

Restrictions = {NF, 0, {DeterminantString(NF,index["5f"]),0,3}}--StartRestrictions
RestrictionsXAS = {NF, 0, {DeterminantString(NF,index["5f"]),0,3}}

ground_state = Eigensystem(Hamiltonian, StartRestrictions, Npsi,{{"Restrictions", Restrictions}})
-- print of some expectation values
oppList={Hamiltonian, OppLz_5f, OppSz_5f,OppN_5f}

print("<E>      <Lz>     <Sz>    <#5f>");

for j = 1,#oppList do
    expectationvalue = Complex.Re(ground_state*oppList[j]*ground_state)
    io.write(string.format("%8.3f ",expectationvalue))
end

print("\n")

--#################################### XAS ####################################################################
--dofile("src/transition_operators.qty")
--XASSpectra = CreateSpectra(XASHamiltonian, TXASz, ground_state, {{"Emin",-800}, {"Emax",1000}, {"NE",9000}, {"Gamma",2},{"Restrictions", RestrictionsXAS},{"NTri",16}})
--XASSpectra.Print({{"file","data/XAS/small_basis"}})
--os.exit()
--#################################### RIXS ####################################################################

print("Time: ",os.time()-start_time)

dofile("src/transition_operators.qty")
--type="small"
--dofile("src/test_size.qty")
--os.exit()

print("Calculating M4")
filename="No/M4/RIXS"
Emin1=805.1
Emax1=825.1
N1=60 --computationaly expensive
Emin2=-20
Emax2=20
N2=20000 --computationaly cheap
Gamma1=3.5
Gamma2=0.37
skip=0
--dofile("src/full_rixs.qty")

print("Calculating M5")
filename="No/M5/RIXS"
Emin1=-565.6
Emax1=-545.6
N1=60 --computationaly expensive
Emin2=-20
Emax2=20
N2=20000 --computationaly cheap

Gamma1=3.5
Gamma2=0.31
skip=1
dofile("src/full_rixs.qty")
